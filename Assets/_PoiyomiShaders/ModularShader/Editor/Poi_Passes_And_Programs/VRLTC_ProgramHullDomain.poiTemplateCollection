#T#PoiVertHullDomainPragma
#pragma vertex VertexProgram
#pragma hull HullProgram
#pragma domain DomainProgram
#T#PoiTessellationDefines
#define POI_TESSELLATED
#T#PoiVertHullDomainStructs
struct tessAppData
{
	float4 vertex : POSITION;
	float3 normal : NORMAL;
	float4 tangent : TANGENT;
	float4 color : COLOR;
	float2 uv0 : TEXCOORD0;
	float2 uv1 : TEXCOORD1;
	float2 uv2 : TEXCOORD2;
	float2 uv3 : TEXCOORD3;
	uint vertexId : TEXCOORD4;
	UNITY_VERTEX_INPUT_INSTANCE_ID
	UNITY_VERTEX_OUTPUT_STEREO
};
#T#PoiVertHullDomainProgram
struct TesFact
{
	float edge[3] : SV_TessFactor;
	float inside : SV_InsideTessFactor;
};

float _TesselationUniform;

tessAppData VertexProgram(appdata v)
{
	tessAppData t;
	UNITY_SETUP_INSTANCE_ID(v);
	UNITY_INITIALIZE_OUTPUT(tessAppData, t);
	UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(t);

	t.vertex = v.vertex;
	t.normal = v.normal;
	t.tangent = v.tangent;
	t.color = v.color;
	t.uv0 = v.uv0;
	t.uv1 = v.uv1;
	t.uv2 = v.uv2;
	t.uv3 = v.uv3;
	t.vertexId = v.vertexId;

	return t;
}

TesFact PatchConstFunc(InputPatch < tessAppData, 3 > patch)
{
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[0]);
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[1]);
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[2]);
	TesFact f;
	float tessFactor = sin(_Time.y) + 2;
	f.edge[0] = tessFactor;
	f.edge[1] = tessFactor;
	f.edge[2] = tessFactor;
	f.inside = tessFactor;
	return f;
}


[UNITY_domain("tri")]
[UNITY_outputcontrolpoints(3)]
[UNITY_outputtopology("triangle_cw")]
[UNITY_partitioning("fractional_odd")]
[UNITY_patchconstantfunc("PatchConstFunc")]
tessAppData HullProgram(InputPatch < tessAppData, 3 > patch,
uint id : SV_OutputControlPointID)
{
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[id]);
	return patch[id];
}

[UNITY_domain("tri")]
VertexOut DomainProgram(
	TesFact factors,
	OutputPatch < tessAppData, 3 > patch,
	float3 barycentrCoords : SV_DomainLocation,
	uint pid : SV_PrimitiveID
)
{
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[0]);
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[1]);
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(patch[2]);

	tessAppData data;
	PoiInitStruct(tessAppData, data);
	#define DOMAIN_INTERPOLATE(fieldName) data.fieldName = \
			patch[0].fieldName * barycentrCoords.x + \
			patch[1].fieldName * barycentrCoords.y + \
			patch[2].fieldName * barycentrCoords.z;

	data.vertexId = patch[0].vertexId + patch[1].vertexId + patch[2].vertexId;
	DOMAIN_INTERPOLATE(vertex);
	DOMAIN_INTERPOLATE(normal);
	DOMAIN_INTERPOLATE(tangent);
	DOMAIN_INTERPOLATE(color);
	DOMAIN_INTERPOLATE(uv0);
	DOMAIN_INTERPOLATE(uv1);
	DOMAIN_INTERPOLATE(uv2);
	DOMAIN_INTERPOLATE(uv3);

	UNITY_TRANSFER_VERTEX_OUTPUT_STEREO(patch[0], data)
	
	return vert(data);
}